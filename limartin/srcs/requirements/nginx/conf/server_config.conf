##
#
# This is a modified version of the default server configuration file, the original
# of which is still viewable in the sites-available directory.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

server {
	listen 80;
	listen [::]:80;

	server_name limartin42fr limartin.42.fr www.limartin.42.fr localhost www.localhost ;

	index index.php index.html index.htm;

	# created as mount point at build time by WordPress Dockerfile.
	root /var/www/html;

	# allows index.php to check if tried args match any index.
	location / {
			try_files $uri $uri/ /index.php$is_args$args;
	}

	# This location block will handle PHP processing and proxy these requests to our wordpress container. 
	# Because our WordPress Docker image will be based on the php:fpm image, 
	# we will also include configuration options that are specific to the FastCGI protocol in this block. 
	# Nginx requires an independent PHP processor for PHP requests: in our case, 
	# these requests will be handled by the php-fpm processor that’s included with the php:fpm image. 
	# Additionally, this location block includes FastCGI-specific directives, variables, and options that 
	# will proxy requests to the WordPress application running in our wordpress container, 
	# set the preferred index for the parsed request URI, and parse URI requests.

	location ~ \.php$ {
			try_files $uri =404;
			fastcgi_split_path_info ^(.+\.php)(/.+)$;
			fastcgi_pass wordpress:9000;
			fastcgi_index index.php;
			include fastcgi_params;
			fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
			fastcgi_param PATH_INFO $fastcgi_path_info;
	}

	# This block will handle .htaccess files since Nginx won’t serve them. 
	# The deny_all directive ensures that .htaccess files will never be served to users.

	location ~ /\.ht {
			deny all;
	}


	# These blocks ensure that requests to /favicon.ico and /robots.txt will not be logged.
	location = /favicon.ico {
			log_not_found off; access_log off;
	}
	location = /robots.txt {
			log_not_found off; access_log off; allow all;
	}
	
	# This block turns off logging for static asset requests and ensures that these assets are highly cacheable, 
	# as they are typically expensive to serve. 
	location ~* \.(css|gif|ico|jpeg|jpg|js|png)$ {
			expires max;
			log_not_found off;
	}

	#return 301 https://$server_name$request_uri;
}




# server {
# 	listen 443 ssl;
# 	listen [::]:443 ssl;

# 	server_name limartin.42.fr localhost www.localhost;
# 	root /usr/share/nginx/limartin.42.ForReal;
# 	index index.html index.htm index.php;

# 	ssl_certificate /etc/certs/MyCert.crt;
# 	ssl_certificate_key /etc/certs/MyKey.key;

# 	client_max_body_size 20m;

# 	location / {
# 		autoindex off;

# 		# First attempt to serve request as file, then
# 		# as directory, then fall back to displaying a 404.
# 		#try_files $uri $uri/ =404;
# 	}

# 	location ~ \.php$ {
# 		include snippets/fastcgi-php.conf;
	
# 		# Unix socket for passing php requests to php fpm and then back to nginx
# 		fastcgi_pass unix:/run/php/php7.3-fpm.sock;
# 	}

# 	# SSL configuration
# 	#
# 	# listen 443 ssl default_server;
# 	# listen [::]:443 ssl default_server;
# 	#
# 	# Note: You should disable gzip for SSL traffic.
# 	# See: https://bugs.debian.org/773332
# 	#
# 	# Read up on ssl_ciphers to ensure a secure configuration.
# 	# See: https://bugs.debian.org/765782
# 	#
# 	# Self signed certs generated by the ssl-cert package
# 	# Don't use them in a production server!
# 	#
# 	# include snippets/snakeoil.conf;


# 	# pass PHP scripts to FastCGI server
# 	#
# 	#location ~ \.php$ {
# 	#	include snippets/fastcgi-php.conf;
# 	#
# 	#	# With php-fpm (or other unix sockets):
# 	#	fastcgi_pass unix:/run/php/php7.3-fpm.sock;
# 	#	# With php-cgi (or other tcp sockets):
# 	#	fastcgi_pass 127.0.0.1:9000;
# 	#}

# 	# deny access to .htaccess files, if Apache's document root
# 	# concurs with nginx's one
# 	#
# 	#location ~ /\.ht {
# 	#	deny all;
# 	#}
# }


# # Virtual Host configuration for example.com
# #
# # You can move that to a different file under sites-available/ and symlink that
# # to sites-enabled/ to enable it.
# #
# #server {
# #	listen 80;
# #	listen [::]:80;
# #
# #	server_name example.com;
# #
# #	root /var/www/example.com;
# #	index index.html;
# #
# #	location / {
# #		try_files $uri $uri/ =404;
# #	}
# #}
